class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>>r(numRows);
        
        for(int i=0 ; i<numRows ; i++)
        {
            r[i].resize(i+1);
            r[i][0] = r[i][i] = 1;
            
            for(int j=1 ; j<i ; j++)
                r[i][j] = r[i-1][j-1] + r[i-1][j];
        }
        return r;
    }
};

Explaination:
The code is given above as follows. The main intuition behind this logic is that arr[i][j] = arr[i-1][j-1] + arr[i-1][j] , which means the element is the sum of the element on top of it and the element besides the top of it.
 =0, r[0].resize(1) ie. the first row will have 1 element
r[0][0] = 1
Output : [[1]]
Now , i = 1, and j = 1
r[1][0] = r[1][1] = 1
Output : [[1],[1,1]]
i = 2
r[2][0] = r[2][2] = 1
i = 2, j = 1
r[2][1] = r[1][0] + r[1][1] = 1 + 1 = 2
Output : [[1],[1,1],[1,2,1]]
i = 3
r[3][0] = r[3][3] = 1
i = 3, j = 1
r[3][1] = r[2][0] + r[2][1] = 1 + 2 = 3
i = 3, j = 2
r[3][2] = r[2][1] + r[2][2] = 2 + 1 = 3
Output : [[1],[1,1],[1,2,1],[1,3,3,1]]
i = 4
r[4][0] = r[4][4] = 1
i = 4 , j = 1
r[4][1] = r[3][0] + r[3][1] = 1 + 3 = 4
i = 4, j = 2 
r[4][2] = r[3][1] + r[3][2] = 3 + 3 = 6
i = 4 , j = 3
r[4][3] = r[3][2] + r[3]][3] = 3 + 1 = 4
Output : [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]
Time Complexity - O(n)
Space Complexity - O(1)